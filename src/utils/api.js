// utils/api.js
import {
  collection,
  getDocs,
  doc,
  getDoc,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  limit,
  startAfter,
  onSnapshot,
} from "firebase/firestore";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db
import { db } from "../firebase-config";

// –£–õ–¨–¢–†–ê-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ location
const extractLocationString = (locationData) => {
  if (!locationData) return "";

  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof locationData === "string") {
    return locationData.trim();
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
  if (typeof locationData === "object" && locationData !== null) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: city, country -> address -> city -> country
    if (locationData.city && locationData.country) {
      return `${String(locationData.city)}, ${String(locationData.country)}`;
    }
    if (locationData.address && locationData.city) {
      return `${String(locationData.address)}, ${String(locationData.city)}`;
    }
    if (locationData.city) {
      return String(locationData.city);
    }
    if (locationData.address) {
      return String(locationData.address);
    }
    if (locationData.country) {
      return String(locationData.country);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    return "";
  }

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
  return String(locationData || "");
};

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è
const normalizeHotelData = (doc) => {
  if (!doc || !doc.data) {
    console.warn("Invalid document:", doc);
    return null;
  }

  const data = doc.data();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è location –∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  const locationString =
    extractLocationString(data.location) ||
    extractLocationString(data.city) ||
    extractLocationString(data.address) ||
    "";

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–µ–ª—è
  const normalizedHotel = {
    id: String(doc.id || ""),
    _id: String(doc.id || ""),

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –í–°–Å –°–¢–†–û–ö–ò
    name: String(data.name || "Hotel Name"),
    description: String(data.description || ""),

    // –õ–æ–∫–∞—Ü–∏—è - –í–°–ï–ì–î–ê –¢–û–õ–¨–ö–û –°–¢–†–û–ö–ê, –ù–ò–ö–û–ì–î–ê –û–ë–™–ï–ö–¢
    location: locationString,

    // –£–î–ê–õ–Ø–ï–ú locationData –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    // locationData: null,

    // –¶–µ–Ω—ã - –¢–û–õ–¨–ö–û –ß–ò–°–õ–ê
    price: Number(data.price || data.basePrice || data.pricePerNight || 0),

    // –†–µ–π—Ç–∏–Ω–≥–∏ - –¢–û–õ–¨–ö–û –ß–ò–°–õ–ê
    rating: Number(data.rating || data.starRating || data.overallRating || 5),
    starRating: Number(data.starRating || data.rating || 5),
    overallRating: Number(data.overallRating || data.rating || 4.5),

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –¢–û–õ–¨–ö–û –ú–ê–°–°–ò–í –°–¢–†–û–ö
    images: Array.isArray(data.images)
      ? data.images.map((img) => String(img || ""))
      : data.image
      ? [String(data.image)]
      : [],

    // –£–¥–æ–±—Å—Ç–≤–∞ - –¢–û–õ–¨–ö–û –ú–ê–°–°–ò–í –°–¢–†–û–ö
    amenities: Array.isArray(data.amenities)
      ? data.amenities.map((amenity) => String(amenity || ""))
      : Array.isArray(data.facilities)
      ? data.facilities.map((facility) => String(facility || ""))
      : [],

    // –ë—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    featured: Boolean(data.featured),
    available: data.available !== false,

    // –î–∞—Ç—ã - –°–¢–†–û–ö–ò
    createdAt:
      data.createdAt?.toDate?.()?.toISOString() ||
      (data.createdAt ? String(data.createdAt) : new Date().toISOString()),
    updatedAt:
      data.updatedAt?.toDate?.()?.toISOString() ||
      (data.updatedAt ? String(data.updatedAt) : new Date().toISOString()),

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è - –¢–û–õ–¨–ö–û –°–¢–†–û–ö–ò
    category: String(data.category || ""),
    type: String(data.type || "hotel"),
    address: String(data.address || ""),
    city: String(data.city || ""),
    country: String(data.country || ""),

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú –ù–ò–ö–ê–ö–ò–ï –û–ë–™–ï–ö–¢–´
    // –ù–ï –≤–∫–ª—é—á–∞–µ–º: coordinates, nearbyAttractions –∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  };

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("‚úÖ Normalized hotel (all safe types):", {
    id: typeof normalizedHotel.id,
    name: typeof normalizedHotel.name,
    location: typeof normalizedHotel.location,
    price: typeof normalizedHotel.price,
    rating: typeof normalizedHotel.rating,
  });

  return normalizedHotel;
};

class ApiClient {
  constructor() {
    this.db = null;
    this.hotelsCollection = null;
    this.initialized = false;
  }

  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  async initialize() {
    if (this.initialized) {
      return;
    }

    try {
      console.log("üîÑ Initializing Firebase API client...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ db –¥–æ—Å—Ç—É–ø–µ–Ω
      if (!db) {
        throw new Error("Firestore database is not available");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä Firestore
      if (!db.app || typeof db.app.name !== "string") {
        throw new Error("Invalid Firestore instance");
      }

      this.db = db;
      this.hotelsCollection = collection(this.db, "hotels");
      this.initialized = true;

      console.log("‚úÖ Firebase API client initialized successfully");
      console.log("üìä Connected to project:", this.db.app.name);
    } catch (error) {
      console.error("‚ùå Failed to initialize Firebase API client:", error);
      throw new Error(`API initialization failed: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  async ensureInitialized() {
    if (!this.initialized) {
      await this.initialize();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
  async testConnection() {
    try {
      await this.ensureInitialized();
      console.log("üîç Testing Firebase connection...");

      const testQuery = query(this.hotelsCollection, limit(1));
      await getDocs(testQuery);
      console.log("‚úÖ Firebase connection successful");
      return true;
    } catch (error) {
      console.error("‚ùå Firebase connection failed:", error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–µ–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async getAllHotelsRaw() {
    try {
      await this.ensureInitialized();
      console.log("üì• Fetching all hotels from Firestore...");

      const snapshot = await getDocs(this.hotelsCollection);

      if (snapshot.empty) {
        console.log("‚ö†Ô∏è No hotels found in collection");
        return [];
      }

      const hotels = snapshot.docs
        .map((doc) => normalizeHotelData(doc))
        .filter((hotel) => hotel !== null); // –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –æ—Ç–µ–ª–∏

      console.log(
        "‚úÖ Successfully fetched and normalized hotels:",
        hotels.length
      );

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
      hotels.forEach((hotel, index) => {
        Object.keys(hotel).forEach((key) => {
          const value = hotel[key];
          if (
            typeof value === "object" &&
            value !== null &&
            !Array.isArray(value)
          ) {
            console.error(
              `üö® CRITICAL: Found object in hotel[${index}].${key}:`,
              value
            );
            // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É
            hotel[key] = String(value);
          }
        });
      });

      return hotels;
    } catch (error) {
      console.error("‚ùå Error fetching all hotels:", error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.code === "permission-denied") {
        console.error("üö´ Permission denied - check Firestore rules");
        console.error("üí° Make sure your Firestore rules allow read access");
      } else if (error.code === "unavailable") {
        console.error("üåê Firestore service unavailable");
      }

      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è graceful degradation
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getHotelsByFilters(params = {}) {
    try {
      await this.ensureInitialized();
      console.log("üîç Firebase API: Getting hotels with filters:", params);

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–µ–ª–∏, –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      const allHotels = await this.getAllHotelsRaw();
      console.log("üìä Total hotels fetched:", allHotels.length);

      let filteredHotels = [...allHotels];

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (
        params.location &&
        params.location !== "" &&
        params.location !== "All Locations"
      ) {
        const locationLower = String(params.location).toLowerCase();
        filteredHotels = filteredHotels.filter((hotel) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ location
          const locationMatch =
            hotel.location &&
            String(hotel.location).toLowerCase().includes(locationLower);

          const nameMatch =
            hotel.name &&
            String(hotel.name).toLowerCase().includes(locationLower);

          return locationMatch || nameMatch;
        });
        console.log("üåç After location filter:", filteredHotels.length);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
      if (params.priceMin && !isNaN(params.priceMin)) {
        filteredHotels = filteredHotels.filter((hotel) => {
          return Number(hotel.price) >= Number(params.priceMin);
        });
        console.log("üí∞ After min price filter:", filteredHotels.length);
      }

      if (params.priceMax && !isNaN(params.priceMax)) {
        filteredHotels = filteredHotels.filter((hotel) => {
          return Number(hotel.price) <= Number(params.priceMax);
        });
        console.log("üí∞ After max price filter:", filteredHotels.length);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏
      if (params.starRating && !isNaN(params.starRating)) {
        filteredHotels = filteredHotels.filter((hotel) => {
          return Number(hotel.starRating) >= Number(params.starRating);
        });
        console.log("‚≠ê After star rating filter:", filteredHotels.length);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
      if (params.rating && !isNaN(params.rating)) {
        filteredHotels = filteredHotels.filter((hotel) => {
          return Number(hotel.overallRating) >= Number(params.rating);
        });
        console.log("üìä After overall rating filter:", filteredHotels.length);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —É–¥–æ–±—Å—Ç–≤–∞–º
      if (
        params.amenities &&
        Array.isArray(params.amenities) &&
        params.amenities.length > 0
      ) {
        filteredHotels = filteredHotels.filter((hotel) => {
          return params.amenities.every((amenity) =>
            hotel.amenities.some((ha) =>
              String(ha).toLowerCase().includes(String(amenity).toLowerCase())
            )
          );
        });
        console.log("üè® After amenities filter:", filteredHotels.length);
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (params.sortBy) {
        case "price-low":
        case "price_asc":
          filteredHotels.sort((a, b) => Number(a.price) - Number(b.price));
          break;
        case "price-high":
        case "price_desc":
          filteredHotels.sort((a, b) => Number(b.price) - Number(a.price));
          break;
        case "rating":
        case "rating_desc":
          filteredHotels.sort(
            (a, b) => Number(b.starRating) - Number(a.starRating)
          );
          break;
        case "name":
        case "name_asc":
          filteredHotels.sort((a, b) =>
            String(a.name).localeCompare(String(b.name))
          );
          break;
        case "name_desc":
          filteredHotels.sort((a, b) =>
            String(b.name).localeCompare(String(a.name))
          );
          break;
        case "featured":
          filteredHotels.sort((a, b) => {
            if (a.featured && !b.featured) return -1;
            if (!a.featured && b.featured) return 1;
            return Number(b.starRating) - Number(a.starRating);
          });
          break;
        default:
          filteredHotels.sort(
            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
          );
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const page = parseInt(params.page) || 1;
      const pageLimit = parseInt(params.limit) || 10;
      const startIndex = (page - 1) * pageLimit;
      const endIndex = startIndex + pageLimit;
      const paginatedHotels = filteredHotels.slice(startIndex, endIndex);

      console.log("‚úÖ Firebase API: Final result:", {
        total: filteredHotels.length,
        page: page,
        limit: pageLimit,
        returned: paginatedHotels.length,
      });

      return {
        hotels: paginatedHotels,
        pagination: {
          total: filteredHotels.length,
          page: page,
          totalPages: Math.ceil(filteredHotels.length / pageLimit),
          limit: pageLimit,
        },
      };
    } catch (error) {
      console.error("‚ùå Firebase API Error in getHotelsByFilters:", error);

      return {
        hotels: [],
        pagination: {
          total: 0,
          page: 1,
          totalPages: 0,
          limit: parseInt(params.limit) || 10,
        },
        error: String(error.message),
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–µ–ª—å –ø–æ ID
  async getHotelById(id) {
    try {
      await this.ensureInitialized();
      console.log("üîç Getting hotel by ID:", id);

      const docRef = doc(this.db, "hotels", String(id));
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const hotel = normalizeHotelData(docSnap);
        if (hotel) {
          console.log("‚úÖ Hotel found:", hotel.name);
          return hotel;
        } else {
          throw new Error("Hotel data is invalid");
        }
      } else {
        throw new Error("Hotel not found");
      }
    } catch (error) {
      console.error("‚ùå Error fetching hotel by ID:", error);
      throw new Error(`Failed to fetch hotel: ${String(error.message)}`);
    }
  }

  // –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π
  async searchHotels(searchTerm) {
    try {
      await this.ensureInitialized();
      console.log("üîç Firebase API: Searching hotels for:", searchTerm);

      const allHotels = await this.getAllHotelsRaw();

      const filteredHotels = allHotels.filter((hotel) => {
        const searchLower = String(searchTerm).toLowerCase();
        return (
          String(hotel.name).toLowerCase().includes(searchLower) ||
          String(hotel.location).toLowerCase().includes(searchLower) ||
          String(hotel.description).toLowerCase().includes(searchLower)
        );
      });

      return {
        hotels: filteredHotels,
        total: filteredHotels.length,
      };
    } catch (error) {
      console.error("‚ùå Error searching hotels:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–µ–ª–∏ (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥)
  async getHotels(params = {}) {
    try {
      await this.ensureInitialized();
      console.log("üè® Firebase API: Getting all hotels with params:", params);

      const allHotels = await this.getAllHotelsRaw();
      const limitCount = params.limit || 50;
      const limitedHotels = allHotels.slice(0, limitCount);

      console.log("‚úÖ Returning hotels:", limitedHotels.length);

      return {
        hotels: limitedHotels,
        pagination: {
          total: allHotels.length,
          page: 1,
          totalPages: Math.ceil(allHotels.length / limitCount),
          limit: limitCount,
        },
      };
    } catch (error) {
      console.error("‚ùå Error in getHotels:", error);
      throw new Error(`Failed to get hotels: ${String(error.message)}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –æ—Ç–µ–ª–∏
  async getFeaturedHotels(limitCount = 6) {
    try {
      await this.ensureInitialized();
      const allHotels = await this.getAllHotelsRaw();
      const featuredHotels = allHotels
        .filter((hotel) => hotel.featured === true)
        .slice(0, limitCount);

      return featuredHotels;
    } catch (error) {
      console.error("‚ùå Error fetching featured hotels:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏
  async getLocations() {
    try {
      await this.ensureInitialized();
      const allHotels = await this.getAllHotelsRaw();
      const locations = new Set();

      allHotels.forEach((hotel) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ location
        if (hotel.location && typeof hotel.location === "string") {
          locations.add(hotel.location);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º city –∏ country –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        if (hotel.city) locations.add(String(hotel.city));
        if (hotel.country) locations.add(String(hotel.country));
        if (hotel.city && hotel.country) {
          locations.add(`${String(hotel.city)}, ${String(hotel.country)}`);
        }
      });

      return Array.from(locations).sort();
    } catch (error) {
      console.error("‚ùå Error fetching locations:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
  async getSearchSuggestions(query) {
    try {
      await this.ensureInitialized();
      console.log("üí° Firebase API: Getting search suggestions for:", query);

      const allHotels = await this.getAllHotelsRaw();
      const locations = new Set();
      const suggestions = [];

      // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
      allHotels.forEach((hotel) => {
        if (hotel.location) locations.add(String(hotel.location));
        if (hotel.city) locations.add(String(hotel.city));
        if (hotel.country) locations.add(String(hotel.country));
      });

      const queryLower = String(query).toLowerCase();

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
      Array.from(locations).forEach((location) => {
        if (String(location).toLowerCase().includes(queryLower)) {
          suggestions.push({
            text: String(location),
            subtitle: "City",
            type: "city",
          });
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–µ–ª–∏
      allHotels.forEach((hotel) => {
        if (
          hotel.name &&
          String(hotel.name).toLowerCase().includes(queryLower)
        ) {
          suggestions.push({
            text: String(hotel.name),
            subtitle: String(hotel.location || "Hotel"),
            type: "hotel",
            id: String(hotel.id),
          });
        }
      });

      return {
        suggestions: suggestions.slice(0, 10),
      };
    } catch (error) {
      console.error("‚ùå Error getting search suggestions:", error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      const defaultSuggestions = [
        { text: "London", subtitle: "United Kingdom", type: "city" },
        { text: "New York", subtitle: "United States", type: "city" },
        { text: "Paris", subtitle: "France", type: "city" },
        { text: "Tokyo", subtitle: "Japan", type: "city" },
        { text: "Dubai", subtitle: "UAE", type: "city" },
      ].filter((item) =>
        String(item.text).toLowerCase().includes(String(query).toLowerCase())
      );

      return { suggestions: defaultSuggestions };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const api = new ApiClient();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
export default api;

export const getHotels = (...args) => api.getHotels(...args);
export const getHotelById = (...args) => api.getHotelById(...args);
export const getHotelsByFilters = (...args) => api.getHotelsByFilters(...args);
export const searchHotels = (...args) => api.searchHotels(...args);
export const getSearchSuggestions = (...args) =>
  api.getSearchSuggestions(...args);
export const getFeaturedHotels = (...args) => api.getFeaturedHotels(...args);
export const testConnection = (...args) => api.testConnection(...args);
